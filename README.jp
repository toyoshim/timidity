======================================================================
	TiMidity++ -- MIDI_to_WAVE変換およびプレーヤー

					出雲正尚
					<iz@onicos.co.jp>
					2004年1月25日
					バージョン2.13.0以降
======================================================================

本プログラムは，まったく無保証のフリーです。GPLに従い，自由に再配布/修
正することができます。ただし，再配布する場合は付属のCOPYING，あるいは
GPLのファイル(バージョン2以降)を取り寄せ，本プログラムと一緒に配布して
ください。

本プログラムのオリジナルは，Tuukka Toivonen <tt@cgs.fi>さんによって作ら
れたTiMidityです。その後，出雲氏，あるいは他の様々な人達の協力によって，
TiMidityの改良版であるTiMidity++がリリースされました。

TiMidityは，もともとMIDIファイルをソフトウェアのみで，WAVEファイルに変
換するツールとして開発されました。今ではただ単なる変換ではなく，リアル
タイムにMIDIを演奏するプレーヤーとして利用されています。外部音源なしに
ソフトウェアのみで，MIDIを演奏するソフトウェアシーケンサとして動作しま
す。

音源には，GUS/patch (Gravis Ultrasound)が用いられます。また，SoundFont
と呼ばれる音源も利用できます。

* TiMidity++ の主な特徴
  - 外部MIDI音源なしでMIDIファイルを演奏できる
  - MIDIファイルを様々なPCM形式のファイル(wavやauなど)に変換できる
  - 音源にはGUS/patchと呼ばれるファイルを用いる
  - SoundFontと呼ばれる音源も利用できる
  - リアルタイムに演奏中の状態が表示できる
  - ncurses，motif，xawなど，様々なユーザインターフェースがある
  - 日本語が表示できる(日本語をサポートしていないインターフェースは除く)
  - ネットワークを介してMIDIファイルを演奏できる
  - アーカイブ/圧縮ファイルを演奏できる
  - MIMPIのWRDファイルの表示をサポート
  - SMFの他に，RCP/R36/G18/G36，MODファイルも演奏できる
  - 32チャネル対応
  - ユーザインタフェースをダイナミックリンク可能
  - サウンドスペクトログラムを表示できる
  - GM/GS/XGモードの認識
  - GS/XGのドラムパート自動判別
  - 音と表示の同期(トレース再生)
  - 低負荷(トレース再生でないとき)
  - メモリを喰う(最低20Mバイトの空き容量は欲しい)
  - オルタネートアサインをサポート
  - リアルタイムに演奏することが困難になると，音数を自動的に減らして処
    理の軽減を図る
  - ストリーム形式のMIDIを演奏できる
  - 以下の MIDI イベントをサポート：
    NoteOn/Off, KeyPressure, Program, ChannelPressure, Pitchwheel,
    ToneBank, ModulationWheel, MainVolume, Panning, Expression,
    Sustain, Portamento, DataEntry, ReverbEffect, ChorusEffect,
    RPN+/-, NRPN, RPN, AllSoundsOff, ResetControllers, AllNotesOff,
    Mono/Poly Part, RandomPan, KeyShift,
    TempoChange, Lyric, InsertText, KARAOKE-Part(@KMIDI),
    MasterVolume, MIDI-Reset, SystemExclusiveMessages

* 使用法:
  timidity [options] filename [...]

  標準入力からMIDIファイルを読み込むにはファイル名として“-”を使います

* オプション:
  -A n,m     --volume=n, --drum-power=m
               音量をn%で指定します(クリッピングを引き起こすかも知れません)
                 またドラムパワーをm%で指定します
     (a)     --[no-]volume-compensation
               音量補正を有効/無効にします(デフォルトは無効です)
  -a         --[no-]anti-alias
               アンチエイリアシングを有効にします
  -B n,m     --buffer-fragments=n,m
               バッファフラグメントの数(n)とバッファサイズ(2^m)を指定します
  -C n       --control-ratio=n
               制御レートを指定します
  -c file    --config-file=file
               追加のコンフィグレーションファイルを読み込みます
  -D n       --drum-channel=n
               nチャンネル目をドラムチャンネルにします
  -E mode    --ext=mode
               TiMidityシーケンサ拡張モードを指定します:
                 mode = w/W : モジュレーション制御を有効/無効にします
                        p/P : ポルタメント制御を有効/無効にします
                        v/V : NRPNビブラートを有効/無効にします
                        s/S : チャンネルプレッシャーを有効/無効にします
                        e/E : モジュレーションエンベロープを有効/無効にします
                        t/T : 全て/特定のテキストメタイベントをトレースします
                        o/O : 同一音の重複を許します/許しません
                        z/Z : 音律制御を有効/無効にします
                        m<HH>: デフォルトマニュファクチュアID<HH>を指定します
                        M<HH>: システムマニュファクチュアID<HH>を指定します
                        b<n>: 全chをデフォルトバンク<n>に設定します
                        B<n>: 全chをバンク<n>で演奏します
                        i<n/m>: 全/<m>chをデフォルトプログラム<n>に設定します
                        I<n/m>: 全/<m>chをプログラム<n>で演奏します
                        F<args>: 下記のエフェクトオプションを参照してください
                   デフォルト: -E wpvSEToz
  -e         --evil
               スレッドプライオリティを上げます(危険) - 注意すること！
  -F         --[no-]fast-panning
               ファーストパンを無効/有効にします(デフォルトは有効です)
  -f         --[no-]fast-decay
               ファーストディケイを有効にします(トグル)
  -g sec     --spectrogram=sec
               サウンドスペクトログラムを表示するウィンドウを開きます
  -H n       --force-keysig=n
               強制的にキーシグネチャを固定します
  -h         --help
               オプションの説明を表示します
  -i mode    --interface=mode
               ユーザインタフェースを指定します(下記のリストを参照ください)
             --realtime-priority=n (for alsaseq only)
               リアルタイムプライオリティを設定します(0-100)
             --sequencer-ports=n (for alsaseq only)
               オープンするシーケンサポートの数を指定します(デフォルトは4)
  -j         --[no-]realtime-load
               演奏しながらパッチファイルを読み込みます(トグル)
  -K n       --adjust-key=n
               n半音単位でキーを調節します(-24..24)
  -k msec    --voice-queue=msec
               ボイスを減少させるオーディオキュータイムを指定します
  -L path    --patch-path=path
               TiMidity++のサーチパスを追加します
  -M name    --pcm-file=name
               演奏するPCMファイル名(*.wavまたは*.aiff)を指定します
                 "auto" : *.mid.wavまたは*.mid.aiffを演奏します
                 "none" : この機能を無効にします(デフォルト)
  -m msec    --decay-time=msec
               サステインしたノートがディケイされるまでの最大時間を指定します
                 0で無効です
  -N n       --interpolation=n
               補完パラメータを指定します(-EFresampオプションに依存します)
                 オーディオキューが99%以下のときは，線形補完が使われます
                 cspline, lagrange:
                   4点補完を指定します(デフォルト有効)
                 newton:
                   n次のニュートン補完を指定します。n=1-57の奇数
                 gauss:
                   n+1点ガウス風補完を指定します。n=1-34(デフォルト25)
  -O mode    --output-mode=mode
               出力モードやフォーマットを指定します(下記のリストを参照ください)
  -o file    --output-file=file
               出力ファイル名(デバイス/サーバ)を指定します("-"で標準出力)
  -P file    --patch-file=file
               すべての楽器を指定したパッチファイルを用いて演奏します
  -p n       --polyphony=n
               最大同時発音数を指定します。
     (a)     --[no-]polyphony-reduction
               自動で発音数の減少させることを可能にします(デフォルト有効)
  -Q n[,...] --mute=n[,...]
               nチャンネルを無視します(0: すべて無視, -n: nチャンネルを復活)
     (t)     --temper-mute=n[,...]
               音律種別nをミュートします(0..3: プリセット, 4..7: ユーザ定義)
  -q sec/n   --audio-buffer=sec/n
               オーディオバッファを秒で指定します
                 sec: 最大バッファ, n: 開始バッファ% (デフォルトは5.0/100%)
                 (100%のサイズはデバイスバッファサイズと等価です)
  -R msec      エンベロープリリースをmsecに修正して音響効果を得ます
                 n=0でnは800に設定されます
  -S n       --cache-size=n
               キャッシュサイズを指定します(0はキャッシュなしです)
  -s freq    --sampling-freq=freq
               再生サンプルレートを(HzまたはkHz)を指定します
  -T n       --adjust-tempo=n
               テンポをn%に調節します
                 n=120でMODファイルをNTSC Amigaのタイミングで演奏します
  -t code    --output-charset=code
               テキストの出力文字コードを指定します:
                 code=auto  : LANG環境変数によってコードが決まります
                              (UNIXのみ)
                      ascii : 非可読ASCIIをピリオド(0x2e)に変換して出力します
                      nocnv : 出力文字コードを変換しません
                      1251  : windows-1251からkoi8-rに変換して出力します
                      euc   : EUCコード(japan)で出力します
                      jis   : JISコードで出力します
                      sjis  : SJISコードで出力します
  -U         --[no-]unload-instruments
               毎曲パッチに割り当てられていたメモリを開放します
  -V power   --volume-curve=power
               ベロシティ/ボリューム/エクスプレッションカーブを設定します
                 amp = vol^power (自動: 0, 線形: 1, 理想: ~1.661, GS: ~2)
  -v         --version
               TiMidityバージョン情報を表示します
  -W mode    --wrd=mode
               WRDインタフェースを選択します(下記のリストを参照ください)
  -w mode    --rcpcv-dll=mode
               Windowsの拡張モード:
                 mode=r/R : rcpcv.dllを有効/無効にします
  -x str     --config-string=str
               指定した文字列strで設定を行います
  -Z file    --freq-table=file
               周波数テーブルを読み込みます("pure"で簡易純正律演奏します)
  pure<n>(m) --pure-intonation=n(m)
               初期のキーシグネチャ<n>を指定します(-7..7)
                 'm'は短調を意味します

* エフェクトオプション(-EF, --ext=Fオプション):
  -EFdelay=d   ディレイを無効にします(デフォルト)
  -EFdelay=l   左ディレイを有効にします
    [,msec]      “msec”は左右のディレイタイムを指定するオプションです
  -EFdelay=r   右ディレイを有効にします
    [,msec]      “msec”は左右のディレイタイムを指定するオプションです
  -EFdelay=b   左右ローテートを有効にします
    [,msec]      “msec”は左右のディレイタイムを指定するオプションです
  -EFchorus=d  コーラスを無効にします
  -EFchorus=n  標準的なMIDIコーラス制御を有効にします
    [,level]     “level”はコーラスレベル[0..127]を指定するオプションです
                 (デフォルト)
  -EFchorus=s  サラウンドコーラスを有効にします
    [,level]     “level”はコーラスレベル[0..127]を指定するオプションです
  -EFreverb=d  MIDIリバーブ制御を無効にします
  -EFreverb=n  標準的なMIDIリバーブ制御を有効にします
    [,level]     “level”はリバーブレベル[0..127]を指定するオプションです
  -EFreverb=g  グローバルリバーブ
    [,level]     “level”はリバーブレベル[0..127]を指定するオプションです
  -EFreverb=f  Freeverb MIDIリバーブ制御を有効にします(デフォルト)
    [,level]     “level”はリバーブレベル[0..127]を指定するオプションです
  -EFreverb=G  グローバルFreeverb
    [,level]     “level”はリバーブレベル[0..127]を指定するオプションです
  -EFvlpf=d    ボイス単位LPFを無効にします
  -EFvlpf=c    ChamberlinレゾナントLPF(12dB/oct)を有効にします(デフォルト)
  -EFvlpf=m    MoogレゾナントローパスVCF(24dB/oct)を有効にします
  -EFns=n      n次ノイズシェーピングフィルタを有効にします
                 n:[0..4] (8ビット線形符号化のとき，デフォルトは4)
                 n:[0..2] (16ビット線形符号化のとき，デフォルトは2)
  -EFresamp=d  補完処理を無効にします
  -EFresamp=l  線形補完アルゴリズムを有効にします
  -EFresamp=c  Cスプライン補完アルゴリズムを有効にします
  -EFresamp=L  ラグランジュ補完アルゴリズムを有効にします
  -EFresamp=n  ニュートン補完アルゴリズムを有効にします
  -EFresamp=g  ガウス風補完アルゴリズムを有効にします(デフォルト)
                 -EFresampは-Nオプションの挙動に影響します

* TiMidityシーケンサ拡張モードの代替ロングオプション:
  --[no-]mod-wheel
  --[no-]portamento
  --[no-]vibrato
  --[no-]ch-pressure
  --[no-]mod-envelope
  --[no-]trace-text-meta
  --[no-]overlap-voice
  --[no-]temper-control
  --default-mid=<HH>
  --system-mid=<HH>
  --default-bank=n
  --force-bank=n
  --default-program=n/m
  --force-program=n/m
  --delay=(d|l|r|b)[,msec]
  --chorus=(d|n|s)[,level]
  --reverb=(d|n|g|f|G)[,level]
  --voice-lpf=(d|c|m)
  --noise-shaping=n
  --resample=(d|l|c|L|n|g)

* 有効なインタフェース(-i, --interfaceオプション):
  -in          ncursesインタフェース
  -iT          vt100インタフェース
  -im          motifインタフェース
  -ik          Tcl/Tkインタフェース
  -ie          Emacsインタフェース(“M-x timidity”から起動)
  -ia          XAWインタフェース
  -ii          skinインタフェース
  -ig          gtk+インタフェース
  -id          dumbインタフェース
  -iA          ALSAシーケンサインタフェース
  -iW          Windowsシンセサイザインタフェース

* インタフェースオプション(-i?オプションに追加):
  `v'          より冗長に(累積的)
  `q'          より寡黙に(累積的)
  `t'          トレース再生
  `l'          ループ再生(インタフェースによっては無視されます)
  `r'          再生前にファイルリスト順をランダムにします
  `s'          再生前にファイルリスト順をソートします
  `D'          TiMidity++をバックグラウンドでデーモン化します(alsaseqのみ)

* インタフェースの代替ロングオプション:
  --verbose=n
  --quiet=n
  --[no-]trace
  --[no-]loop
  --[no-]random
  --[no-]sort
  --[no-]background

* 有効な出力モード(-O, --output-modeオプション):
  -Od          dspデバイス
  -Os          ALSA pcmデバイス
  -Ow          RIFF WAVEファイル
  -Or          生の波形データ
  -Ou          Sunオーディオファイル
  -Oa          AIFFファイル
  -Ol          MIDIイベントのリストアップ
  -OM          MOD -> MIDIファイル変換

* 出力フォーマットオプション(-O?オプションに追加):
  `S'          ステレオ
  `M'          モノラル
  `s'          符号あり出力
  `u'          符号なし出力
  `1'          16ビットサンプル精度
  `8'          8ビットサンプル精度
  `l'          線形符号化
  `U'          μ-Law符号化
  `A'          A-Law符号化
  `x'          バイト反転出力

* 出力フォーマットの代替ロングオプション:
  --output-stereo
  --output-mono
  --output-signed
  --output-unsigned
  --output-16bit
  --output-8bit
  --output-linear
  --output-ulaw
  --output-alaw
  --[no-]output-swab

* 有効なWRDインタフェース(-W, --wrdオプション):
  -Wx          X WRDトレーサ
  -Ww          WindowsコンソールWRDトレーサ
  -Wt          TTY WRDトレーサ
  -Wd          dumb WRDトレーサ
  -W-          WRDトレーサなし

* アーカイブファイルの演奏
  TiMidity++では，アーカイブファイルをそのまま読み込んで演奏することが
  できます。以下のアーカイブ形式をサポートしています。

    - tarファイル       (*.tar)
    - tar+gzipファイル  (*.tar.gz, *.tgz)
    - zipファイル       (*.zip)
    - lzhファイル       (*.lzh)
        (lh0, lh1, lh2, lh3, lh4, lh5, lh6, lzs, lz4, lz5に対応)

  アーカイブファイル中の個々のファイルを指定するには，アーカイブファイ
  ル名の後に続けて‘#’を記述し，その後に続けてアーカイブ中のファイル名
  を指定します。
  ‘#’の後は，UNIXシェルの正規表現のパターンになっていますが，大文字/
  小文字は区別されません。以下に例をいくつか挙げます。

    timidity file.zip#file.mid
        file.zip中のfile.midファイルを演奏します。

    timidity file.lzh#*.mid
        file.lzh中の*.midにマッチするファイルを演奏します。

    timidity file.tgz#*
        これはtimidity file.tgzと等価です。

* MIDI ファイルのネットワークアクセス。
  TiMidity++では，MIDIファイルをネットワークを介してアクセスすることが
  できます。現在サポートしているプロトコルはHTTP，FTP，NNTP(NetNews)で，
  それぞれ，http://〜，ftp://〜，news://〜のように指定します。

  ネットワーク上にアーカイブされたMIDIファイルも同様な方法で指定すると
  演奏することができます。なお，NetNewsによるアクセスにおいて，MessageID
  部にNewsGroup名を記述すると，そのGroup中に投稿されているすべてのMIDI
  ファイルを演奏します。また，投稿されたMIDIファイルは，uuencodeされて
  いるか，あるいはMultipart形式のuuencode/base64/hexbinでなければなりま
  せん。

* 入手元
  以下の場所から最新のTiMidity++が入手できます。

    http://www.goice.co.jp/member/mo/timidity/
        (主にUNIX用)
    http://www.asahi-net.or.jp/~gb7t-ngm/timidity/
        (Macintosh版)
    http://www2.off.ne.jp/~dai/timidity/timidity-izumo.html
        (Windows版)

  なお，オリジナル版であるTuukka ToivonenさんのTiMidityの公式な配付サイ
  トは閉じてしまいました。もし，オリジナル版を入手したいならば，
  
    http://www.goice.co.jp/member/mo/timidity/dist/timidity-0.2i.tar.gz

  から得ることができます。
