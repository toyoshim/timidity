======================================================================
	TiMidity++インストールガイド

					出雲正尚
					<iz@onicos.co.jp>
					2004年1月25日
					バージョン2.13.0以降
======================================================================

このドキュメントは，TiMidity++(バージョン2.13.0以降)のUNIX上でのインス
トール方法を説明しています。Macintoshのインストール方法は，本ドキュメン
トでは説明されていません。

TiMidity++は，Windows上のCygwin環境でもconfigureが動作し，timidity.exe
を作成することが可能です。もし，Cygwinがない場合は，

http://sourceware.cygnus.com/cygwin/

から入手してインストールしてください。
そして，CYGNUSを起動し，/bin/shにbashへのシンボリックリンクを作成してお
いてください。

インストールの大まかな手順は

  1. configure
  2. common.makefile，Makefile，timidity.hの編集(しなくてもよい)
  3. make (GNUのmakeが必要)
  4. インストール
  5. 音源をそろえる

となります。以下，順を追って説明します。
なお，ドキュメント中の‘%’はシェルのプロンプトを表しています。

1. configure
------------
まずは，

% /bin/sh configure --help

としてください。すると，いろいろなconfigureのオプションが現れてきます。
このうち，主なものを説明します。

  --help
    オプションの簡単な説明が表示されます。

  --prefix=PREFIX
    インストール先のベースとなるディレクトリを指定します。デフォルトで
    は“/usr/local”がPREFIXとなっています。
        PREFIX/bin          実行ファイル
        PREFIX/lib/timidity TiMidityが必要とする音源やライブラリなど
        PREFIX/man          マニュアル
    にインストールされます。
    例：
    % sh configure --prefix=/opt/gnu
    /opt/gnu/bin，/opt/gnu/lib/timidity，/opt/gnu/man以下にインストール
    します。

  --x-includes=DIR
    Xのインクルードディレクトリを指定します。configureは，自動的にXのイ
    ンクルードディレクトリを検索しますが，必ずしも成功するとは限りませ
    ん。例えば，R5，R6の両方がインストールされている環境では，どちらを
    使うかを明示的に指定したほうが確実です。

  --x-libraries=DIR
    Xのライブラリディレクトリを指定します。configureは，自動的にXのライ
    ブラリディレクトリを検索しますが，必ずしも成功するとは限りません。
    例えば，R5，R6の両方がインストールされている環境では，どちらを使う
    かを明示的に指定したほうが確実です。

  --enable-debug
    デバッグ用にコンパイルします。

  --with-x
    X Window環境がある場合は指定してください。

  --without-x
    X Window環境がない場合は指定してください。

  --with-tcl-includes=dir
    Tclのインクルードファイルのあるディレクトリを指定してください。
    (これは，Tcl/Tkまわりのconfigureに失敗した時のみ試してみてください)

  --with-tcl-libs=dir
    Tclのライブラリファイルのあるディレクトリを指定してください。
    (これは，Tcl/Tkまわりのconfigureに失敗した時のみ試してみてください)

  --with-tk-includes=dir
    Tkのインクルードファイルのあるディレクトリを指定してください。
    (これは，Tcl/Tkまわりのconfigureに失敗した時のみ試してみてください)

  --with-tk-libs=dir
    Tkのライブラリファイルのあるディレクトリを指定してください。
    (これは，Tcl/Tkまわりのconfigureに失敗した時のみ試してみてください)

  --enable-audio
    TiMidityでMIDIファイルを演奏できるようにします。
    ただ単なるMIDI_to_WAVEコンバータとして構築する場合は，
    --enable-audio=noとしてください。

  --enable-nas
    NAS(Network Audio System)出力を有効にします。

  --enable-esd
    EsounD出力を有効にします。

  --enable-dynamic
    シェアードライブラリ形式で作成したユーザインタフェースをダイナミッ
    クローディングにより使用することを可能にします。

  --enable-ncurses
    Ncursesインタフェースを組み込みます。--enable-ncurses=dynamicとすれ
    ば，ダイナミックリンクインタフェースとして構築します。timidityの-in
    オプションで起動します。

  --enable-slang
    slangインタフェースを組み込みます。--enable-slang=dynamicとすれば，
    ダイナミックリンクインタフェースとして構築します。timidityの-isオプ
    ションで起動します。-isインターフェースは-inに色をつけた感じになり
    ます。

  --enable-motif
    Motifインタフェースを組み込みます。--enable-motif=dynamicとすれば，
    ダイナミックリンクインタフェースとして構築します。timidityの-imオプ
    ションで起動します。お金がなくてMofifライセンスが手に入らない人は，
    lesstifでも動きます。

  --enable-tcltk
    Tcl/Tkインタフェースを組み込みます。--enable-tcltk=dynamicとすれば，
    ダイナミックリンクインタフェースとして構築します。timidityの-ikオプ
    ションで起動します。

  --enable-emacs
    Emacsインタフェースを組み込みます。--enable-emacs=dynamicとすれば，
    ダイナミックリンクインタフェースとして構築します。Emacs上から
    “M-x timidity”で起動します。Emacsインターフェースを有効にするには，
    さらにtimidity.elの編集とインストールが必要です。

  --enable-vt100
    VT100端末の制御コードを用いた，フルスクリーンインタフェースです。
    --enable-ncurses=dynamicとすれば，ダイナミックリンクインタフェース
    として構築します。timidityの-iTオプションで起動します。-iTは-iNに似
    た感じのインタフェースです。

  --enable-xaw
    X Athena Widgetインタフェースを組み込みます。--enable-xaw=dynamicと
    すれば，ダイナミックリンクインタフェースとして構築します。timidity
    の-iaオプションで起動します。

  --enable-xskin
    skinデータを利用したインタフェースを組み込みます。
    --enable-xskin=dynamicとすれば，ダイナミックリンクインタフェースと
    して構築します。timidityの-iiオプションで起動します。

  --enable-gtk
    gtk+版インタフェースを組み込みます。--enable-gtk=dynamicとすれば，
    ダイナミックリンクインタフェースとして構築します。timidityの-igオプ
    ションで起動します。

  --enable-w32gui
    Windows GUI版としてコンパイルします。

  --enable-network
    このオプションを指定すると，ネットワークを介してMIDIファイルを演奏
    できるようになります。MIDIファイルをhttp://〜というふうなURLで指定
    すると，そのファイルが演奏されます。

  --enable-spectrogram
    X Window版において，サウンドスペクトログラム表示を可能にします。
    timidityの-g0.02といったオプションでウィンドウが開きます。

  --enable-wrd
    X Window版WRDインタフェースを組み込みます。timidityの-Wxオプション
    で起動します。

例えば，以下のように実行します。

% ./configure --enable-ncurses --enable-slang --enable-motif \
              --enable-tcltk --enable-emacs --enable-vt100 --enable-xaw \
              --enable-xskin --enable-gtk \
              --enable-network --enable-spectrogram --enable-wrd

いくつかのMIDIの演奏には，CPUパワーを必要とします。最適化オプションをう
まく選んでコンパイルすることで，今まで途切れ途切れでしか演奏できなかっ
たものが途切れずに演奏できることがあります。configure時にコンパイラオプ
ションを指定することで，TiMidityをより高速に動作させることができます。

例えば，super-sparc/gccでは，

(csh, tcsh などの場合)
% env CFLAGS='-O3 -Wall -mv8 -funroll-all-loops -fomit-frame-pointer \
              -msupersparc /bin/sh configure [以下，オプション]...

(sh, bash などの場合)
% CFLAGS='-O3 -Wall -mv8 -funroll-all-loops -fomit-frame-pointer \
          -msupersparc /bin/sh configure [以下，オプション]...

のようにします。

2. common.makefile，Makefile，timidity.hの編集
----------------------------------------------
もし，正しくコンパイルできない場合や，様々なパラメタを修正したい場合は，
common.makefile，Makefile，timidity.h内のパラメタを修正してください。

3. make
-------
以上の設定が終了したら，makeとタイプするだけです。makeにはGNUのmakeが必
要です。環境によっては，gmakeというコマンド名でインストールされている場
合があります。

なお，XAW をリンクするところで，

vendorShellClassRec
vendorShellWidgetClass

に関してワーニングが出る環境がありますが，これは問題ないので気にしてく
てもいいです。

4. install
----------
    make install.bin    - 実行ファイルのインストール
    make install.tk     - Tcl/Tkインタフェースのインストール
    make install.el     - Emacs インタフェースのインストール
    make install.man    - Manualのインストール
    make install        - すべてのファイルをインストール

実際にインストールを実行する前に，

% make -n ...

などとしてインストールされるデレクトリやファイルを確認してください。

5. 音源をそろえる
-----------------
このパッケージのTiMidityをインストールしただけでは，音が鳴りません。演
奏するには，GUSの音源ファイルを入手し，設定ファイルであるtimidity.cfgを
作成しなければなりません。デフォルトでは，
“/usr/local/share/timidity/timidity.cfg”になります(ただし，Windows上
では“C:/WINDOWS/timidity.cfg”)。パッチを探すのに，以下のサイトを訪れ
てみてください。

http://www.goice.co.jp/member/mo/timidity/link.html#gus
http://www.goice.co.jp/member/mo/timidity/dist/cfg/ (Some samples of *.cfg)
http://www.i.h.kyoto-u.ac.jp/~shom/timidity/        (10M or 4M patch)
ftp://ftp.cdrom.com/pub/gus/sound/patches/files/    (GUS サイトの移転先)

入手した音源は，適切な場所に展開してください。必要に応じて，*.cfgファイ
ルのdirのパス名を修正してください。

==============================================================================
	timidity.hの編集
==============================================================================

必要に応じてCONFIG_FILEを定義してください。デフォルトでは

#define CONFIG_FILE DEFAULT_PATH "/timidity.cfg"

となっています。DEFAULT_PATHは，Makefileで定義したTIMID_DIRと同じです。
もし，どうしても他の場所に置きたいなら

#define CONFIG_FILE "/etc/timidity.cfg"

のように定義します。

次に，ファイル展開コマンドの設定です。この設定はWindowsでは無視してくだ
さい。デフォルトでは

#define DECOMPRESSOR_LIST { \
		".gz", "gunzip -c %s", \
		".bz2", "bunzip2 -c %s", \
		".Z", "zcat %s", \
		".zip", "unzip -p %s", \
		".lha", "lha -pq %s", \
		".lzh", "lha -pq %s", \
		".shn", "shorten -x %s -", \
		0 }

となっています。オリジナルのTiMidityでは，上記で指定した拡張子に対応し
たコマンドを利用して，ファイルを展開して読み込むことができます。一方，
TiMidity++では幾つかの形式については，TiMidityが自前で展開してファイル
を読み込みます。しかし，すべての形式はサポートしていないので，サポート
されていない形式には，上記で指定したコマンドが利用されます。

次に，パッチファイルの変換コマンドに関する設定です。この設定はWindowsで
は無視してください。デフォルトでは

#define PATCH_CONVERTERS { \
		".wav", "wav2pat %s", \
		0 }

となっています。

次に，GUS/patchファイルの拡張子の指定です。ここに指定した拡張子は*.cfg
内のファイル名で省略できます。デフォルトでは

#define PATCH_EXT_LIST { \
		".pat", \
		".shn", ".pat.shn", \
		".gz", ".pat.gz", \
		".bz2", ".pat.bz2", \
		0 }

となっています。

次に，デフォルトのinstrumentの設定です。

#define DEFAULT_PROGRAM 0

となっています。MIDIのProgram Changeイベントがない場合に，この値が利用
されます。通常，0番はピアノです。

次に，ドラムチャンネルの設定です。デフォルトでは

#define DEFAULT_DRUMCHANNELS {10, -1}

となっています。これは，コマンドラインオプションで変更できるので，この
ままで良いと思います。変更する場合は，ドラムチャンネルのリストを複数指
定し，-1で終了します。もし，10と16チャンネルをデフォルトでドラムチャン
ネルにしたいならば，

#define DEFAULT_DRUMCHANNELS {10, 16, -1}

とします。なお，ドラムチャンネルはコマンドラインオプションで変更できま
す。

次に，浮動小数点数の型の指定です。

・typedef double FLOAT_T;
・typedef float FLOAT_T;

のどちらかを選んでください。double精度のFPUを搭載しているマシンでは，
floatよりdoubleの方が高速です。sparcやSGI/IPなどは，doubleの方が高速で
す。最近のFPUは，たいていの場合はdouble精度の方が高速です。ただし，一部
のマシンやパソコンでは，floatの方が高速になるかも知れません。

次に，再生サンプルレートの下限，上限の設定です。デフォルトでは

#define MIN_OUTPUT_RATE 4000
#define MAX_OUTPUT_RATE 65000

となっています。これは特に変更する必要はないでしょう。

次に，マスターボリュームのデフォルト値の設定です。デフォルトでは

#define DEFAULT_AMPLIFICATION 70

となっています。この値はパーセント値で指定します。デフォルトの70%はわり
と良い値なので，これも特に変更しなくても良いでしょう。コマンドラインオ
プションで変更することもできます。

次に，デフォルトの再生サンプルレートの設定です。デフォルトでは

#define DEFAULT_RATE 44100

となっています。この値は，コンパイラオプション-DDEFAULT_RATE=<rate>のよ
うに指定しても良いです。パワーのあるマシンで，DAT品質並みのGUS/patchを
使って快適な音を聞きたい場合は

#define DEFAULT_RATE	48000

とするのも良いです。

次に，同時発音数に関する設定です。デフォルトでは

#define DEFAULT_VOICES 256

となっています。DEFAULT_VOICESは起動時の同時発音数で，この値は-pオプシ
ョンを用いて1からメモリが許されるまでの数を設定することができます。-in
インターフェースでは，実行時に変化させることもできます。パワーのあるマ
シンなら，デフォルトの同時発音数を増やして

#define DEFAULT_VOICES 512

のようにするのも良いです。しかしながら，経験上128重音あれば，大抵のMIDI
ファイルが快適に聞けます。また，256重音を越えるMIDIファイルはほとんど存
在しなく(極希にありますが)，256重音以上を処理するにはかなり高性能なCPU
(例えばR10000とか)であっても負荷が高いです。そのため，DEFAULT_VOICESは
極端に増やしてもあまり意味がないので，256くらいを上限にするのが妥当です。

次に，内部バッファの大きさの設定です。デフォルトでは

#define AUDIO_BUFFER_BITS 12

となっています。ここは特に変更することはないでしょう。

次に，CONTROLS_PER_SECONDの設定です。デフォルトでは

#define CONTROLS_PER_SECOND 1000

となっています。これもこのままで良いでしょう。
# TiMidityでは，エンベロープの音量計算を1サンプルごとに計算するのではな
# く，ある程度まとめて計算します。この値を大きくすればするほど細かく計
# 算するため，音の質はよくなりますが，逆にCPU負荷が高くなります。コマン
# ドラインオプションで変更もできるので，このままにしときましょう。

次に，リサンプル時における補完の設定です。デフォルトでは，

#define DEFAULT_RESAMPLATION resample_gauss

となっています。これを定義すると，リサンプル時にガウス風補完を行い，音
質が向上します。その反面，CPU負荷が上がります。非力なマシンでない限り定
義しておきましょう。補完アルゴリズムとして，下記のものが使用可能です。

#define DEFAULT_RESAMPLATION resample_none
#define DEFAULT_RESAMPLATION resample_linear
#define DEFAULT_RESAMPLATION resample_cspline
#define DEFAULT_RESAMPLATION resample_lagrange
#define DEFAULT_RESAMPLATION resample_newton
#define DEFAULT_RESAMPLATION resample_gauss

補完アルゴリズムは，コマンドラインオプションで変更もできます。ユーザに
よって変更できなくするには

#define FIXED_RESAMPLATION

のコメントアウトを外してください。

次に，DSPエフェクトに関する設定です。デフォルトでは

#define USE_DSP_EFFECT

となっています。コーラス，ディレイ，EQおよびインサーションエフェクトの
性能を向上させるもので，これは特に変更する必要はないでしょう。

次に，LOOKUP_HACKの設定です。デフォルトでは

/* #define LOOKUP_HACK */
/* #define LOOKUP_INTERPOLATION */

と未定義になっています。このマクロを定義すると，多少高速に動作します。
ただし，16ビットのサンプルを8ビットで計算するので音質が劣化します。非力
なマシンで演奏処理が追い付かないなら定義してみましょう。

次に，FAST_DECAYの設定です。デフォルトでは

/* #define FAST_DECAY */

と未定義になっています。これを定義するとエンベロープステージを2倍速く進
めるようになります。結果として，高速化につながるのですが，その反面，音
の長さが短くなり，迫力に欠てきます。この設定はコマンドラインからon/off
できるので，これは未定義のままで良いでしょう。

次に，FRACTION_BITS の設定です。デフォルトでは

#define FRACTION_BITS 12

となっています。これはこのままで良いでしょう。
補足：TiMidityでは，音の音程変換に浮動小数点数を用いずに，32ビット固定
小数点数を用いて計算しています。

次に，自動GUS/patch音量調節の設定です。デフォルトでは

#define ADJUST_SAMPLE_VOLUMES

と定義されています。これを定義しておくと，GUS/patchの音量を自動的に調節
して同じ音の大きさにします。もし，小さい音のGUS/patchは小さいままに，大
きい音のGUS/patchは大きいままにしたいなら未定義にしてください。正確にチ
ューニングされているGUS/patchセットのみを用いるなら未定義でも良いです。
しかし，他の様々なGUS/patchを利用する場合に，音量が不揃いになってしまう
ので，このマクロは定義しておく方が良いでしょう。

次に，DANGEROUS_RENICEの設定です。デフォルトでは

/* #define DANGEROUS_RENICE -15 */

と未定義になっています。setuid rootのTiMidityで，プロセスのプライオリテ
ィを上げて実行したい場合は，このマクロを定義してください。UNIXのみで有
効です。このマクロを定義してTiMidityをインストールした後は，

# chown root /usr/local/bin/timidity
# chmod u+s /usr/local/bin/timidity

のようにします。
注意：DANGEROUS_RENICEを定義していない場合は，setuidプログラムにしない
でください。

次に，MAX_DIE_TIMEの設定です。デフォルトでは

#define MAX_DIE_TIME 20

となっています。あまり小さな数にすると，プツっていうノイズ音(クリックノ
イズ)が顕著になります。この値はこのままで良いでしょう。
# モノラルパートの音程がA->Bと移るとき，Aの音を瞬時に消してしまうとクリ
# ックノイズが出てしまいます。このパラメータで，瞬時に消すべき音にクリ
# ックノイズが出ないようにコントロールします。

次に，正弦関数テーブル参照に関する設定です。デフォルトでは

#define LOOKUP_SINE

となっています。幾つかの環境(特に数値演算プロセッサを持たないPCなど)で
は，正弦関数値をテーブル参照した方が，その都度計算するよりかなり高速に
なります。このマクロは定義しておく方が良いでしょう。

次に，リサンプリング最適化に関する設定です。デフォルトでは

#define PRECALC_LOOPS

となっています。幾つかの環境では，このマクロを未定義にしたほうが高速に
なります。

次に，ldexp()を使うかどうかの設定です。デフォルトでは

/* #define USE_LDEXP */

と未定義になっています。浮動小数点数の掛け算が，ldexp()を用いた方が速い
マシンの場合は定義してください。

次に，プリリサンプリングキャッシュの大きさの設定です。デフォルトでは

#define DEFAULT_CACHE_DATA_SIZE (2*1024*1024)

と2Mになっています。TiMidity++では，MIDIイベントを演奏前にスキャンして，
一部の音をあらかじめリサンプリングします。そのリサンプリングのバッファ
の大きさを指定してください。大きくするほど高速になりますが，その分メモ
リを浪費します。2M以上に増やしても，あまり顕著に高速化しなく，またコマ
ンドラインオプションからも変更できるので，ここはデフォルトのままで良い
でしょう。

次に，ネットワークに関する設定です。TiMidity++では，URLを用いてネットワ
ークを介してファイルにアクセスすることが可能になっています。Makefileの
設定で有効にしている場合のみ，この機能が有効になります。以下のマクロを
設定してください。

・MAIL_DOMAIN
  メールアドレスのドメイン名を指定してください。例えば，メールアドレス
  がiz@onicos.co.jpだとすると，
  #define MAIL_DOMAIN "@onicos.co.jp"
  と記述します。

・MAIL_NAME
  UNIXでは未定義にしてください。Windowsではメール名を定義してください。
  例えば，メールアドレスがiz@onicos.co.jpだとすると，
  #define MAIL_NAME "iz"
  と記述します。

このメールアドレスは，anonymous FTPにproxyを介さずにアクセスする場合に
利用されます。

次に，一時ファイルの置場所を指定します。デフォルトでは

/* #define TMPDIR "/var/tmp" */

と未定義になっています。UNIXでは，このマクロを未定義にしておくとTMPDIR
環境変数で定義されているディレクトリに一時ファイルを作成します。TMPDIR
マクロもTMPDIR環境変数もどちらとも未定義の場合は，/tmpに一時ファイルが
作成されます。Windowsでは，TMPDIR環境変数は無視されますので，TMPDIRマク
ロを定義してください。

次に，GSのドラムパートの認識に関する設定です。

#define GS_DRUMPART

と定義すれば，GSのエクスクルーシッブメッセージからドラムパートを認識し
ます。

/* #define GS_DRUMPART */

と未定義にすればこの機能は無効になります。

次に，出力文字コードの設定です。日本語環境では

#define JAPANESE

と定義してください。日本語環境でない場合は，

/* #define JAPANESE */

とコメントアウトしてください。次に出力コードを決めます。OUTPUT_TEXT_CODE
マクロに出力コードを指定します。以下の文字列が有効です。

"AUTO"	- Auto conversion by `LANG' environment variable (UNIX only)
"ASCII"	- Convert unreadable characters to '.'(0x2e)
"NOCNV"	- No conversion
"EUC"	- EUC
"JIS"	- JIS
"SJIS"	- shift JIS

UNIX上の日本語環境では，上記すべて有効です。Windows日本語環境では，
"ASCII"，"NOCNV"，"SJIS" のどれかを指定してください。日本語環境でない場
合は，"ASCII"，"NOCNV"のどちらかを指定してください。

次に，MIDIの制御に関する設定です。デフォルトは

#define MODULATION_WHEEL_ALLOW
#define PORTAMENTO_ALLOW
#define NRPN_VIBRATO_ALLOW
/* #define REVERB_CONTROL_ALLOW */
#define FREEVERB_CONTROL_ALLOW
#define CHORUS_CONTROL_ALLOW
/* #define SURROUND_CHORUS_ALLOW */
/* #define GM_CHANNEL_PRESSURE_ALLOW */
#define VOICE_CHAMBERLIN_LPF_ALLOW
/* #define VOICE_MOOG_LPF_ALLOW */
/* #define MODULATION_ENVELOPE_ALLOW */
/* #define ALWAYS_TRACE_TEXT_META_EVENT */
#define OVERLAP_VOICE_ALLOW
#define TEMPER_CONTROL_ALLOW

となっています。これらは，コマンドラインオプションで変更することができ
ますので，このままで良いと思います。

・MODULATION_WHEEL_ALLOW
  定義すると，Modulation wheel機能をデフォルトで有効にします。
  (-Ew:on -EW:off)
・PORTAMENTO_ALLOW
  定義すると，ポルタメント機能をデフォルトで有効にします。
  (-Ep:on -EP:off)
・NRPN_VIBRATO_ALLOW
  定義すると，NRPNビブラート機能をデフォルトで有効にします。
  (-Ev:on -EV:off)
・REVERB_CONTROL_ALLOW
  定義すると，標準的なリバーブ機能をデフォルトで有効にします。この機能
  は，ややCPUパワーを必要とします。
  (-EFreverb=1:on -EFreverb=0:off)
・FREEVERB_CONTROL_ALLOW
  定義すると，Freeverbなリバーブ機能をデフォルトで有効にします。この機
  能は，非常にCPUパワーを必要とするため，リアルタイム演奏が困難になりま
  す。
  (-EFreverb=3:on -EFreverb=0:off)
・CHORUS_CONTROL_ALLOW
  定義すると，標準的なコーラス機能をデフォルトで有効にします。この機能
  は，ややCPUパワーを必要とします。
  (-EFchorus=1:on -EFchorus=0:off)
・SURROUND_CHORUS_ALLOW
  定義すると，サラウンドコーラス機能をデフォルトで有効にします。この機
  能は，ややCPUパワーを必要とします。
  (-EFchorus=2:on -EFchorus=0:off)
・GM_CHANNEL_PRESSURE_ALLOW
  定義すると，Channel pressureをデフォルトで有効にします。
  (-Es:on -ES:off)
・VOICE_CHAMBERLIN_LPF_ALLOW
  定義すると，ChamberlinレゾナントLPF(12dB/oct)をデフォルトで有効にしま
  す。
  (-EFvlpf=1:on -EFvlpf=0:off)
・VOICE_MOOG_LPF_ALLOW
  定義すると，MoogレゾナントローパスVCF(24dB/oct)をデフォルトで有効にし
  ます。
  (-EFvlpf=2:on -EFvlpf=0:off)
・MODULATION_ENVELOPE_ALLOW
  定義すると，モジュレーションエンベロープをデフォルトで有効にします。
  (-Ee:on -EE:off)
・ALWAYS_TRACE_TEXT_META_EVENT
  定義すると，Text Metaイベントの文字列をデフォルトでトレース表示します。
  (-Et:on -ET:off)
・OVERLAP_VOICE_ALLOW
  定義すると，同一音の重なったvoiceをデフォルトで有効にします。
  (-Eo:on -EO:off)
・TEMPER_CONTROL_ALLOW
  定義すると，MIDI Tuning Standardの音律制御をデフォルトで有効にします。
  (-Ez:on -EZ:off)
